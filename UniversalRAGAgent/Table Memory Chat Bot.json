{
  "name": "Table Memory Chat Bot",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2320,
        672
      ],
      "id": "849e8a3a-7522-46f6-a828-47c0e84ed0ec",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ypHiVnbB3jkc0yAx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze if this conversation contains information worth remembering long-term.\n\nCurrent context:\n={{ $json.context }}\n\nLatest exchange:\nUser: {{ $json.userMessage }}\nAssistant: {{ $json.assistantResponse }}\n\nRespond with ONLY valid JSON:\n{\"should_update\": true, \"new_memories\": [{\"type\": \"preference\", \"content\": \"User likes pizza\"}], \"remove_indices\": []}\n\nOnly create memories for important lasting information (preferences, facts, goals). Not for casual greetings.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1248,
        480
      ],
      "id": "86ccbf3c-6984-44b5-bc44-97d53ef4392d",
      "name": "Memory Manager"
    },
    {
      "parameters": {
        "jsCode": "// Configuration for context rebuilding\nconst MAX_MESSAGES = 20; // total entries (user + assistant)\nconst MAX_CHAR_COUNT = 100000; // hard ceiling for combined character count\nconst SUMMARY_SUFFIX = ' ... [truncated]';\n\n// Gather latest interaction data\nconst contextId = $('When Executed by Another Workflow').item.json.context_id;\n\n// Memory manager output\nconst memoryOutput = $input.item.json.output;\n\n// Parse prior context safely\nlet context = { recent_messages: [], long_term_memories: [] };\nconst contextData = $('When Executed by Another Workflow').item.json.context;\n\nif (contextData) {\n  try {\n    if (typeof contextData === 'object') {\n      context = contextData;\n    } else if (typeof contextData === 'string') {\n      const trimmed = contextData.trim();\n      if (trimmed && trimmed !== 'null' && trimmed !== 'undefined') {\n        context = JSON.parse(trimmed);\n      }\n    }\n  } catch (e) {\n    console.log('Error parsing context, using empty context:', e.message);\n  }\n}\n\nif (!Array.isArray(context.recent_messages)) {\n  context.recent_messages = [];\n} else {\n  context.recent_messages = context.recent_messages\n    .filter((entry) => entry && typeof entry === 'object')\n    .map((entry) => ({\n      role: entry.role || 'assistant',\n      content: typeof entry.content === 'string' ? entry.content : ''\n    }));\n}\n\nif (!Array.isArray(context.long_term_memories)) {\n  context.long_term_memories = [];\n}\n\nconst transcriptItems = $items('Fetch Transcript') || [];\nconst transcripts = transcriptItems\n  .map((item) => item.json || {})\n  .filter((entry) => entry && (!entry.context_id || entry.context_id === contextId))\n  .sort((a, b) => {\n    const toTimestamp = (value) => {\n      if (!value) {\n        return 0;\n      }\n      const parsed = Date.parse(value);\n      if (!Number.isNaN(parsed)) {\n        return parsed;\n      }\n      const numeric = Number(value);\n      return Number.isFinite(numeric) ? numeric : 0;\n    };\n    const aTime = toTimestamp(a.createdAt ?? a.created_at ?? a.updatedAt ?? a.updated_at);\n    const bTime = toTimestamp(b.createdAt ?? b.created_at ?? b.updatedAt ?? b.updated_at);\n    return bTime - aTime;\n  });\n\nconst rebuiltMessages = [];\nlet totalChars = 0;\nlet stopAdding = false;\n\nconst addMessage = (role, originalContent) => {\n  if (stopAdding || rebuiltMessages.length >= MAX_MESSAGES) {\n    stopAdding = true;\n    return;\n  }\n\n  let content = typeof originalContent === 'string' ? originalContent.trim() : '';\n  if (!content) {\n    return;\n  }\n\n  let summaryAttempted = false;\n\n  while (true) {\n    if (totalChars + content.length <= MAX_CHAR_COUNT) {\n      rebuiltMessages.push({ role, content });\n      totalChars += content.length;\n      return;\n    }\n\n    if (summaryAttempted) {\n      stopAdding = true;\n      return;\n    }\n\n    summaryAttempted = true;\n    const available = MAX_CHAR_COUNT - totalChars;\n    if (available <= SUMMARY_SUFFIX.length) {\n      stopAdding = true;\n      return;\n    }\n\n    const sliceLength = Math.max(available - SUMMARY_SUFFIX.length, 0);\n    content = `${content.slice(0, sliceLength)}${SUMMARY_SUFFIX}`;\n  }\n};\n\nif (transcripts.length > 0) {\n  for (const entry of transcripts) {\n    if (stopAdding || rebuiltMessages.length >= MAX_MESSAGES) {\n      break;\n    }\n    const role = entry.role === 'assistant' ? 'assistant' : 'user';\n    addMessage(role, entry.message);\n  }\n} else if (context.recent_messages.length > 0) {\n  // Fall back to existing context if no transcript rows are available\n  for (const entry of context.recent_messages.slice(-MAX_MESSAGES)) {\n    addMessage(entry.role === 'assistant' ? 'assistant' : 'user', entry.content);\n  }\n}\n\ncontext.recent_messages = rebuiltMessages.reverse();\n\n// Update long-term memory decisions\nlet memoryUpdate = { should_update: false, new_memories: [], remove_indices: [] };\ntry {\n  const cleaned = memoryOutput.replace(/```json\\n?/g, '').replace(/```/g, '').trim();\n  memoryUpdate = JSON.parse(cleaned);\n} catch (e) {\n  console.log('No memory update');\n}\n\nif (memoryUpdate.should_update && Array.isArray(memoryUpdate.new_memories)) {\n  context.long_term_memories.push(...memoryUpdate.new_memories);\n}\n\nreturn {\n  json: {\n    context_id: contextId,\n    context: JSON.stringify(context)\n  }\n};\r\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        672
      ],
      "id": "245c4c4a-b18f-4c03-906b-5ac42f215e07",
      "name": "Build Next Context"
    },
    {
      "parameters": {
        "jsCode": "// Prepare transcript rows for the latest exchange\nconst contextId = $('When Executed by Another Workflow').item.json.context_id;\nconst userMessage = $('When Executed by Another Workflow').item.json.userMessage;\nconst assistantResponse = $('When Executed by Another Workflow').item.json.assistantResponse;\n\nconst items = [];\n\nif (typeof userMessage === 'string' && userMessage.trim()) {\n  items.push({\n    json: {\n      context_id: contextId,\n      role: 'user',\n      message: userMessage\n    }\n  });\n}\n\nif (typeof assistantResponse === 'string' && assistantResponse.trim()) {\n  items.push({\n    json: {\n      context_id: contextId,\n      role: 'assistant',\n      message: assistantResponse\n    }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        672
      ],
      "id": "4e39bf82-c092-4038-ae14-0eb4fb0a6575",
      "name": "Prepare Transcript Rows"
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "value": "0GV2sxO6KBloUxpq",
          "mode": "list",
          "cachedResultName": "ura_dev_chat_transcript",
          "cachedResultUrl": "/projects/wzADSex6JcQgm6C6/datatables/0GV2sxO6KBloUxpq"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "context_id": "={{ $json.context_id }}",
            "role": "={{ $json.role }}",
            "message": "={{ $json.message }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "context_id",
              "displayName": "context_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "role",
              "displayName": "role",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -720,
        672
      ],
      "id": "465ec3b5-2a4b-4b0a-a168-c568d73b490c",
      "name": "Insert Transcript Rows"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "LK2ds2NsZAyQx8nk",
          "mode": "list",
          "cachedResultName": "ura_dev_chat_contexts",
          "cachedResultUrl": "/projects/wzADSex6JcQgm6C6/datatables/LK2ds2NsZAyQx8nk"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "context_id",
              "keyValue": "={{ $json.context_id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "context": "={{ $json.context }}",
            "context_id": "={{ $json.context_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "context_id",
              "displayName": "context_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "context",
              "displayName": "context",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -160,
        672
      ],
      "id": "a4046272-96d9-4e31-8a57-635b282b5fcd",
      "name": "Upsert row(s)"
    },
    {
      "parameters": {
        "message": "={{ $json.output }}",
        "waitUserReply": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        -1968,
        480
      ],
      "id": "000a5866-ce15-4435-978a-f97bb897e12d",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Base Context').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful assistant.\n\nConversation context (JSON):\n{{ $('Get Context').item.json.context || '{\"recent_messages\":[],\"long_term_memories\":[]}' }}\n\nThe context contains:\n- recent_messages: previous conversation turns with this user\n- long_term_memories: important facts, preferences, and goals about the user\n\nUse this information naturally when responding. Don't mention that you're reading from context"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2320,
        480
      ],
      "id": "2aacc87f-207c-4a0e-aee0-571b944a1d54",
      "name": "Response Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1248,
        672
      ],
      "id": "c17b7218-cf6b-45f6-a8a9-7653107a6237",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "ypHiVnbB3jkc0yAx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "LK2ds2NsZAyQx8nk",
          "mode": "list",
          "cachedResultName": "ura_dev_chat_contexts",
          "cachedResultUrl": "/projects/wzADSex6JcQgm6C6/datatables/LK2ds2NsZAyQx8nk"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "context",
              "keyValue": "={{ $('Chat Trigger').item.json.sessionId || 'default' }}"
            }
          ]
        },
        "limit": 1
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2528,
        480
      ],
      "id": "e5799cf5-e945-4d92-8777-4d926de22672",
      "name": "Get Context",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -3328,
        480
      ],
      "id": "f4236760-3f63-49d8-a11c-8171a7c961db",
      "name": "Chat Trigger",
      "webhookId": "1e3dcdcd-0b5a-4d6d-bae3-3cb8de788b90"
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"context_id\": \"823f85559ab443eeabb3887ead1db47b\",\n  \"userMessage\": \"I like fishing\",\n  \"assistantResponse\": \"That's great! Fishing is a wonderful hobby...\",\n  \"context\": \"{\\\"recent_messages\\\":[{\\\"role\\\":\\\"user\\\",\\\"content\\\":\\\"hello\\\"},{\\\"role\\\":\\\"assistant\\\",\\\"content\\\":\\\"hi there\\\"}],\\\"long_term_memories\\\":[{\\\"type\\\":\\\"preference\\\",\\\"content\\\":\\\"User likes fishing\\\"}]}\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1440,
        480
      ],
      "id": "e1d757d7-75af-4e83-87bb-01929f905b7d",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "tbFBssvM3gwTuKvo",
          "mode": "id",
          "cachedResultUrl": "/workflow/tbFBssvM3gwTuKvo"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "userMessage": "={{ $('Chat Trigger').item.json.chatInput }}",
            "assistantResponse": "={{ $('Response Agent').item.json.output }}",
            "context": "={{ $('Get Context').item.json.context || '{\"recent_messages\":[],\"long_term_memories\":[]}' }}",
            "context_id": "={{ $('Context Keys').item.json.context_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "context_id",
              "displayName": "context_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "userMessage",
              "displayName": "userMessage",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "assistantResponse",
              "displayName": "assistantResponse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "context",
              "displayName": "context",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -1744,
        480
      ],
      "id": "6b316f7e-a0ce-4455-872d-25852880ff6a",
      "name": "Call 'Memory Chat Bot'"
    },
    {
      "parameters": {
        "content": "Make memory Manager smarter and remove \"Build Next Context\"\n\nLog chats and memory for the future when we have better consolidation\n\nAdd the context nodes and add context ID as key \n\nLog conversations. For each message pair check is it part of the previous conversation? Then update the summary of that conversation, a maximum of 2 sentences. If not, start a new conversation.\n\nAnd finally port this to Supabase",
        "height": 416
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1120,
        64
      ],
      "typeVersion": 1,
      "id": "3c3505aa-9d41-4a85-a3c5-6354acfee97a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b57aaebc-00b6-49d5-8a4f-90ecb9246d97",
              "name": "context_id",
              "value": "={{ $json.userid }}",
              "type": "string"
            },
            {
              "id": "588a1a2e-a5aa-4c7d-82d5-239a3cee5721",
              "name": "table_prefix",
              "value": "={{ $json.appname }}_{{ $json.environment }}_",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2944,
        480
      ],
      "id": "176d6486-8c0c-468e-b7df-c4da7b6c04a2",
      "name": "Context Keys"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json.chatInput || $json.message?.text || $json.body?.chatInput || $json.text }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            },
            {
              "id": "b84118bf-d789-499b-87e7-f8d3b601cec8",
              "name": "tenant",
              "value": "=",
              "type": "string"
            },
            {
              "id": "bdacb505-6584-4518-95e8-7d5e7c20f020",
              "name": "environment",
              "value": "=dev",
              "type": "string"
            },
            {
              "id": "6b9472fb-1541-4684-97ec-d358fe048aad",
              "name": "userid",
              "value": "=  michaelfY0bPv0HuPsz",
              "type": "string"
            },
            {
              "id": "669003c6-cc8f-4641-a58b-39a5b5306d4c",
              "name": "appname",
              "value": "ura",
              "type": "string"
            },
            {
              "id": "29013846-2214-4d3b-ae9e-226bb27da2c6",
              "name": "persona",
              "value": "",
              "type": "string"
            },
            {
              "id": "8c10376c-c743-4213-82a8-0bc661e2a79e",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "02cfaf95-aa2b-4c0d-ad3b-31ef1417b08e",
      "name": "Base Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3136,
        480
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2736,
        480
      ],
      "id": "3562a045-8eb2-41c2-93dc-ebda72b2c645",
      "name": "deleteme"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "0GV2sxO6KBloUxpq",
          "mode": "list",
          "cachedResultName": "ura_dev_chat_transcript",
          "cachedResultUrl": "/projects/wzADSex6JcQgm6C6/datatables/0GV2sxO6KBloUxpq"
        },
        "returnAll": true
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -512,
        672
      ],
      "id": "53b72429-a019-4bcb-860a-fe35ddaf6a2e",
      "name": "Fetch Transcript"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Response Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory Manager": {
      "main": [
        [
          {
            "node": "Prepare Transcript Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Next Context": {
      "main": [
        [
          {
            "node": "Upsert row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Transcript Rows": {
      "main": [
        [
          {
            "node": "Insert Transcript Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat": {
      "main": [
        [
          {
            "node": "Call 'Memory Chat Bot'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Memory Manager",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Context": {
      "main": [
        [
          {
            "node": "Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Trigger": {
      "main": [
        [
          {
            "node": "Base Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Context Keys": {
      "main": [
        [
          {
            "node": "deleteme",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Base Context": {
      "main": [
        [
          {
            "node": "Context Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "deleteme": {
      "main": [
        [
          {
            "node": "Get Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Transcript Rows": {
      "main": [
        [
          {
            "node": "Fetch Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Transcript": {
      "main": [
        [
          {
            "node": "Build Next Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3a540c94-0308-44f0-b1a7-0699e3bc453e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7ac72ab13b8f564b4e52fe865fd322b93ff4a198e7d01a343aa643a3d940b098"
  },
  "id": "tbFBssvM3gwTuKvo",
  "tags": []
}